#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('üîÑ HashBurger - Assistant de Duplication de Boutique\n');

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function main() {
  try {
    // Collecte des informations
    console.log('üìù Configuration de votre nouvelle boutique :\n');
    
    const shopTitle = await question('Nom de votre boutique : ');
    const shopSubtitle = await question('Description/sous-titre : ');
    const telegramChannel = await question('Canal Telegram (@votre_channel) : ');
    const scrollingText = await question('Texte d√©filant (ou ENTER pour d√©faut) : ') || `REJOIGNEZ NOUS SUR ${shopTitle.toUpperCase()} üì≤ ‚Ä¢ CONTACT`;
    
    console.log('\nüîê Configuration Admin :');
    const adminUsername = await question('Nom d\'utilisateur admin : ');
    const adminPassword = await question('Mot de passe admin : ');
    
    console.log('\nüóÑÔ∏è Configuration Base de Donn√©es :');
    const mongoUri = await question('MongoDB URI : ');
    
    console.log('\n‚òÅÔ∏è Configuration Cloudinary :');
    const cloudinaryName = await question('Cloud Name : ');
    const cloudinaryKey = await question('API Key : ');
    const cloudinarySecret = await question('API Secret : ');
    
    // G√©n√©ration d'une cl√© secr√®te al√©atoire
    const nextAuthSecret = Math.random().toString(36).substring(2) + Math.random().toString(36).substring(2);
    
    console.log('\nüöÄ Configuration de votre boutique...\n');
    
    // 1. Cr√©ation du fichier .env.local
    const envContent = `# MongoDB
MONGODB_URI=${mongoUri}

# Cloudinary
CLOUDINARY_CLOUD_NAME=${cloudinaryName}
CLOUDINARY_API_KEY=${cloudinaryKey}
CLOUDINARY_API_SECRET=${cloudinarySecret}

# Admin
ADMIN_USERNAME=${adminUsername}
ADMIN_PASSWORD=${adminPassword}

# NextAuth Secret
NEXTAUTH_SECRET=${nextAuthSecret}
`;

    fs.writeFileSync('.env.local', envContent);
    console.log('‚úÖ Fichier .env.local cr√©√©');
    
    // 2. Mise √† jour du contentCache.ts
    const contentCachePath = 'src/lib/contentCache.ts';
    let contentCache = fs.readFileSync(contentCachePath, 'utf8');
    
    // Remplacer les valeurs par d√©faut
    contentCache = contentCache.replace(/shopTitle: 'HashBurger'/, `shopTitle: '${shopTitle}'`);
    contentCache = contentCache.replace(/shopSubtitle: 'Premium Concentr√©s'/, `shopSubtitle: '${shopSubtitle}'`);
    contentCache = contentCache.replace(/scrollingText: 'REJOIGNEZ NOUS SUR NOS R√âSEAUX üì≤ ‚Ä¢ CONTACT'/, `scrollingText: '${scrollingText}'`);
    contentCache = contentCache.replace(/telegramLink: 'https:\/\/t\.me\/hashburgerchannel'/, `telegramLink: 'https://t.me/${telegramChannel.replace('@', '')}'`);
    
    // Mise √† jour du contenu Info
    const infoContent = `# √Ä propos de ${shopTitle}

**${shopTitle}** est ${shopSubtitle.toLowerCase()}.

## Nos Sp√©cialit√©s
- Produit Premium 1
- Produit Premium 2
- Produit Premium 3

## Nos Services
- Livraison rapide
- Support client
- Qualit√© garantie`;
    
    contentCache = contentCache.replace(/# √Ä propos de HashBurger[\s\S]*?Support 24\/7`/, infoContent + '`');
    
    // Mise √† jour du contenu Contact
    const contactContent = `# Contactez ${shopTitle}

## Contact
**Telegram:** ${telegramChannel}
**Disponibilit√©:** 24h/24

## Livraison
**Zone:** √Ä d√©finir
**D√©lais:** Rapide et s√©curis√©`;
    
    contentCache = contentCache.replace(/# Contactez HashBurger[\s\S]*?Exp√©dition s√©curis√©e`/, contactContent + '`');
    
    fs.writeFileSync(contentCachePath, contentCache);
    console.log('‚úÖ Configuration de base mise √† jour');
    
    // 3. Mise √† jour du message de bienvenue
    const pagePath = 'src/app/page.tsx';
    let pageContent = fs.readFileSync(pagePath, 'utf8');
    pageContent = pageContent.replace(/Bienvenu\(e\)s sur Notre Mini App üì≤/, `Bienvenu(e)s chez ${shopTitle} üì≤`);
    fs.writeFileSync(pagePath, pageContent);
    console.log('‚úÖ Message de bienvenue personnalis√©');
    
    // 4. Mise √† jour des m√©tadonn√©es
    const layoutPath = 'src/app/layout.tsx';
    if (fs.existsSync(layoutPath)) {
      let layoutContent = fs.readFileSync(layoutPath, 'utf8');
      layoutContent = layoutContent.replace(/title: 'HashBurger'/, `title: '${shopTitle}'`);
      layoutContent = layoutContent.replace(/description: '.*?'/, `description: '${shopTitle} - ${shopSubtitle}'`);
      fs.writeFileSync(layoutPath, layoutContent);
      console.log('‚úÖ M√©tadonn√©es SEO mises √† jour');
    }
    
    // 5. Cr√©ation du fichier de configuration personnalis√©
    const configContent = `// Configuration personnalis√©e pour ${shopTitle}
export const SHOP_CONFIG = {
  name: '${shopTitle}',
  subtitle: '${shopSubtitle}',
  telegram: '${telegramChannel}',
  scrollingText: '${scrollingText}',
  admin: {
    username: '${adminUsername}',
    // Le mot de passe est dans .env.local pour la s√©curit√©
  },
  created: '${new Date().toISOString()}',
  version: '1.0.0'
};
`;
    
    fs.writeFileSync('shop-config.js', configContent);
    console.log('‚úÖ Fichier de configuration cr√©√©');
    
    // 6. Mise √† jour du package.json
    const packagePath = 'package.json';
    if (fs.existsSync(packagePath)) {
      const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
      packageJson.name = shopTitle.toLowerCase().replace(/\s+/g, '-');
      packageJson.description = `${shopTitle} - ${shopSubtitle}`;
      fs.writeFileSync(packagePath, JSON.stringify(packageJson, null, 2));
      console.log('‚úÖ Package.json mis √† jour');
    }
    
    console.log('\nüéâ Configuration termin√©e avec succ√®s !\n');
    console.log('üìã Prochaines √©tapes :');
    console.log('1. V√©rifiez votre fichier .env.local');
    console.log('2. Testez en local : npm run dev');
    console.log('3. D√©ployez sur Vercel avec vos variables d\'environnement');
    console.log('4. Configurez votre boutique depuis /admin');
    console.log('\nüöÄ Votre boutique est pr√™te √† √™tre d√©ploy√©e !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration :', error.message);
  } finally {
    rl.close();
  }
}

main();